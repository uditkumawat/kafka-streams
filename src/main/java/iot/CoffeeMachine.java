/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package iot;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CoffeeMachine extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2305110258730642168L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CoffeeMachine\",\"namespace\":\"iot\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serial\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupCount\",\"type\":\"int\"}],\"connect.name\":\"iot\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CoffeeMachine> ENCODER =
      new BinaryMessageEncoder<CoffeeMachine>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CoffeeMachine> DECODER =
      new BinaryMessageDecoder<CoffeeMachine>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CoffeeMachine> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CoffeeMachine> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CoffeeMachine>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CoffeeMachine to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CoffeeMachine from a ByteBuffer. */
  public static CoffeeMachine fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.String serial;
  @Deprecated public java.lang.String customerId;
  @Deprecated public int groupCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CoffeeMachine() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param serial The new value for serial
   * @param customerId The new value for customerId
   * @param groupCount The new value for groupCount
   */
  public CoffeeMachine(java.lang.String id, java.lang.String serial, java.lang.String customerId, java.lang.Integer groupCount) {
    this.id = id;
    this.serial = serial;
    this.customerId = customerId;
    this.groupCount = groupCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return serial;
    case 2: return customerId;
    case 3: return groupCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: serial = (java.lang.String)value$; break;
    case 2: customerId = (java.lang.String)value$; break;
    case 3: groupCount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'serial' field.
   * @return The value of the 'serial' field.
   */
  public java.lang.String getSerial() {
    return serial;
  }

  /**
   * Sets the value of the 'serial' field.
   * @param value the value to set.
   */
  public void setSerial(java.lang.String value) {
    this.serial = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'groupCount' field.
   * @return The value of the 'groupCount' field.
   */
  public java.lang.Integer getGroupCount() {
    return groupCount;
  }

  /**
   * Sets the value of the 'groupCount' field.
   * @param value the value to set.
   */
  public void setGroupCount(java.lang.Integer value) {
    this.groupCount = value;
  }

  /**
   * Creates a new CoffeeMachine RecordBuilder.
   * @return A new CoffeeMachine RecordBuilder
   */
  public static iot.CoffeeMachine.Builder newBuilder() {
    return new iot.CoffeeMachine.Builder();
  }

  /**
   * Creates a new CoffeeMachine RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CoffeeMachine RecordBuilder
   */
  public static iot.CoffeeMachine.Builder newBuilder(iot.CoffeeMachine.Builder other) {
    return new iot.CoffeeMachine.Builder(other);
  }

  /**
   * Creates a new CoffeeMachine RecordBuilder by copying an existing CoffeeMachine instance.
   * @param other The existing instance to copy.
   * @return A new CoffeeMachine RecordBuilder
   */
  public static iot.CoffeeMachine.Builder newBuilder(iot.CoffeeMachine other) {
    return new iot.CoffeeMachine.Builder(other);
  }

  /**
   * RecordBuilder for CoffeeMachine instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CoffeeMachine>
    implements org.apache.avro.data.RecordBuilder<CoffeeMachine> {

    private java.lang.String id;
    private java.lang.String serial;
    private java.lang.String customerId;
    private int groupCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(iot.CoffeeMachine.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serial)) {
        this.serial = data().deepCopy(fields()[1].schema(), other.serial);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.groupCount)) {
        this.groupCount = data().deepCopy(fields()[3].schema(), other.groupCount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CoffeeMachine instance
     * @param other The existing instance to copy.
     */
    private Builder(iot.CoffeeMachine other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serial)) {
        this.serial = data().deepCopy(fields()[1].schema(), other.serial);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.groupCount)) {
        this.groupCount = data().deepCopy(fields()[3].schema(), other.groupCount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public iot.CoffeeMachine.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public iot.CoffeeMachine.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'serial' field.
      * @return The value.
      */
    public java.lang.String getSerial() {
      return serial;
    }

    /**
      * Sets the value of the 'serial' field.
      * @param value The value of 'serial'.
      * @return This builder.
      */
    public iot.CoffeeMachine.Builder setSerial(java.lang.String value) {
      validate(fields()[1], value);
      this.serial = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'serial' field has been set.
      * @return True if the 'serial' field has been set, false otherwise.
      */
    public boolean hasSerial() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'serial' field.
      * @return This builder.
      */
    public iot.CoffeeMachine.Builder clearSerial() {
      serial = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public iot.CoffeeMachine.Builder setCustomerId(java.lang.String value) {
      validate(fields()[2], value);
      this.customerId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public iot.CoffeeMachine.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupCount' field.
      * @return The value.
      */
    public java.lang.Integer getGroupCount() {
      return groupCount;
    }

    /**
      * Sets the value of the 'groupCount' field.
      * @param value The value of 'groupCount'.
      * @return This builder.
      */
    public iot.CoffeeMachine.Builder setGroupCount(int value) {
      validate(fields()[3], value);
      this.groupCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'groupCount' field has been set.
      * @return True if the 'groupCount' field has been set, false otherwise.
      */
    public boolean hasGroupCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'groupCount' field.
      * @return This builder.
      */
    public iot.CoffeeMachine.Builder clearGroupCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CoffeeMachine build() {
      try {
        CoffeeMachine record = new CoffeeMachine();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.serial = fieldSetFlags()[1] ? this.serial : (java.lang.String) defaultValue(fields()[1]);
        record.customerId = fieldSetFlags()[2] ? this.customerId : (java.lang.String) defaultValue(fields()[2]);
        record.groupCount = fieldSetFlags()[3] ? this.groupCount : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CoffeeMachine>
    WRITER$ = (org.apache.avro.io.DatumWriter<CoffeeMachine>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CoffeeMachine>
    READER$ = (org.apache.avro.io.DatumReader<CoffeeMachine>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
