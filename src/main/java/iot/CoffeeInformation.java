/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package iot;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CoffeeInformation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4018612542261169788L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CoffeeInformation\",\"namespace\":\"iot\",\"fields\":[{\"name\":\"customerId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"coffeeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"coffeeMachineSerial\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deviceSerial\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"coffeeDosage\",\"type\":\"int\",\"default\":0},{\"name\":\"coffeeMilligrams\",\"type\":\"int\",\"default\":0},{\"name\":\"timestamp\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"groupId\",\"type\":\"int\",\"default\":0},{\"name\":\"customerName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}],\"connect.name\":\"iot\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CoffeeInformation> ENCODER =
      new BinaryMessageEncoder<CoffeeInformation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CoffeeInformation> DECODER =
      new BinaryMessageDecoder<CoffeeInformation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CoffeeInformation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CoffeeInformation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CoffeeInformation>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CoffeeInformation to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CoffeeInformation from a ByteBuffer. */
  public static CoffeeInformation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String customerId;
  @Deprecated public java.lang.String coffeeId;
  @Deprecated public java.lang.String coffeeMachineSerial;
  @Deprecated public java.lang.String deviceSerial;
  @Deprecated public int coffeeDosage;
  @Deprecated public int coffeeMilligrams;
  @Deprecated public java.lang.Long timestamp;
  @Deprecated public int groupId;
  @Deprecated public java.lang.String customerName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CoffeeInformation() {}

  /**
   * All-args constructor.
   * @param customerId The new value for customerId
   * @param coffeeId The new value for coffeeId
   * @param coffeeMachineSerial The new value for coffeeMachineSerial
   * @param deviceSerial The new value for deviceSerial
   * @param coffeeDosage The new value for coffeeDosage
   * @param coffeeMilligrams The new value for coffeeMilligrams
   * @param timestamp The new value for timestamp
   * @param groupId The new value for groupId
   * @param customerName The new value for customerName
   */
  public CoffeeInformation(java.lang.String customerId, java.lang.String coffeeId, java.lang.String coffeeMachineSerial, java.lang.String deviceSerial, java.lang.Integer coffeeDosage, java.lang.Integer coffeeMilligrams, java.lang.Long timestamp, java.lang.Integer groupId, java.lang.String customerName) {
    this.customerId = customerId;
    this.coffeeId = coffeeId;
    this.coffeeMachineSerial = coffeeMachineSerial;
    this.deviceSerial = deviceSerial;
    this.coffeeDosage = coffeeDosage;
    this.coffeeMilligrams = coffeeMilligrams;
    this.timestamp = timestamp;
    this.groupId = groupId;
    this.customerName = customerName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return coffeeId;
    case 2: return coffeeMachineSerial;
    case 3: return deviceSerial;
    case 4: return coffeeDosage;
    case 5: return coffeeMilligrams;
    case 6: return timestamp;
    case 7: return groupId;
    case 8: return customerName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.String)value$; break;
    case 1: coffeeId = (java.lang.String)value$; break;
    case 2: coffeeMachineSerial = (java.lang.String)value$; break;
    case 3: deviceSerial = (java.lang.String)value$; break;
    case 4: coffeeDosage = (java.lang.Integer)value$; break;
    case 5: coffeeMilligrams = (java.lang.Integer)value$; break;
    case 6: timestamp = (java.lang.Long)value$; break;
    case 7: groupId = (java.lang.Integer)value$; break;
    case 8: customerName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'coffeeId' field.
   * @return The value of the 'coffeeId' field.
   */
  public java.lang.String getCoffeeId() {
    return coffeeId;
  }

  /**
   * Sets the value of the 'coffeeId' field.
   * @param value the value to set.
   */
  public void setCoffeeId(java.lang.String value) {
    this.coffeeId = value;
  }

  /**
   * Gets the value of the 'coffeeMachineSerial' field.
   * @return The value of the 'coffeeMachineSerial' field.
   */
  public java.lang.String getCoffeeMachineSerial() {
    return coffeeMachineSerial;
  }

  /**
   * Sets the value of the 'coffeeMachineSerial' field.
   * @param value the value to set.
   */
  public void setCoffeeMachineSerial(java.lang.String value) {
    this.coffeeMachineSerial = value;
  }

  /**
   * Gets the value of the 'deviceSerial' field.
   * @return The value of the 'deviceSerial' field.
   */
  public java.lang.String getDeviceSerial() {
    return deviceSerial;
  }

  /**
   * Sets the value of the 'deviceSerial' field.
   * @param value the value to set.
   */
  public void setDeviceSerial(java.lang.String value) {
    this.deviceSerial = value;
  }

  /**
   * Gets the value of the 'coffeeDosage' field.
   * @return The value of the 'coffeeDosage' field.
   */
  public java.lang.Integer getCoffeeDosage() {
    return coffeeDosage;
  }

  /**
   * Sets the value of the 'coffeeDosage' field.
   * @param value the value to set.
   */
  public void setCoffeeDosage(java.lang.Integer value) {
    this.coffeeDosage = value;
  }

  /**
   * Gets the value of the 'coffeeMilligrams' field.
   * @return The value of the 'coffeeMilligrams' field.
   */
  public java.lang.Integer getCoffeeMilligrams() {
    return coffeeMilligrams;
  }

  /**
   * Sets the value of the 'coffeeMilligrams' field.
   * @param value the value to set.
   */
  public void setCoffeeMilligrams(java.lang.Integer value) {
    this.coffeeMilligrams = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'groupId' field.
   * @return The value of the 'groupId' field.
   */
  public java.lang.Integer getGroupId() {
    return groupId;
  }

  /**
   * Sets the value of the 'groupId' field.
   * @param value the value to set.
   */
  public void setGroupId(java.lang.Integer value) {
    this.groupId = value;
  }

  /**
   * Gets the value of the 'customerName' field.
   * @return The value of the 'customerName' field.
   */
  public java.lang.String getCustomerName() {
    return customerName;
  }

  /**
   * Sets the value of the 'customerName' field.
   * @param value the value to set.
   */
  public void setCustomerName(java.lang.String value) {
    this.customerName = value;
  }

  /**
   * Creates a new CoffeeInformation RecordBuilder.
   * @return A new CoffeeInformation RecordBuilder
   */
  public static iot.CoffeeInformation.Builder newBuilder() {
    return new iot.CoffeeInformation.Builder();
  }

  /**
   * Creates a new CoffeeInformation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CoffeeInformation RecordBuilder
   */
  public static iot.CoffeeInformation.Builder newBuilder(iot.CoffeeInformation.Builder other) {
    return new iot.CoffeeInformation.Builder(other);
  }

  /**
   * Creates a new CoffeeInformation RecordBuilder by copying an existing CoffeeInformation instance.
   * @param other The existing instance to copy.
   * @return A new CoffeeInformation RecordBuilder
   */
  public static iot.CoffeeInformation.Builder newBuilder(iot.CoffeeInformation other) {
    return new iot.CoffeeInformation.Builder(other);
  }

  /**
   * RecordBuilder for CoffeeInformation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CoffeeInformation>
    implements org.apache.avro.data.RecordBuilder<CoffeeInformation> {

    private java.lang.String customerId;
    private java.lang.String coffeeId;
    private java.lang.String coffeeMachineSerial;
    private java.lang.String deviceSerial;
    private int coffeeDosage;
    private int coffeeMilligrams;
    private java.lang.Long timestamp;
    private int groupId;
    private java.lang.String customerName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(iot.CoffeeInformation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coffeeId)) {
        this.coffeeId = data().deepCopy(fields()[1].schema(), other.coffeeId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coffeeMachineSerial)) {
        this.coffeeMachineSerial = data().deepCopy(fields()[2].schema(), other.coffeeMachineSerial);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deviceSerial)) {
        this.deviceSerial = data().deepCopy(fields()[3].schema(), other.deviceSerial);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.coffeeDosage)) {
        this.coffeeDosage = data().deepCopy(fields()[4].schema(), other.coffeeDosage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.coffeeMilligrams)) {
        this.coffeeMilligrams = data().deepCopy(fields()[5].schema(), other.coffeeMilligrams);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.groupId)) {
        this.groupId = data().deepCopy(fields()[7].schema(), other.groupId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.customerName)) {
        this.customerName = data().deepCopy(fields()[8].schema(), other.customerName);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CoffeeInformation instance
     * @param other The existing instance to copy.
     */
    private Builder(iot.CoffeeInformation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coffeeId)) {
        this.coffeeId = data().deepCopy(fields()[1].schema(), other.coffeeId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coffeeMachineSerial)) {
        this.coffeeMachineSerial = data().deepCopy(fields()[2].schema(), other.coffeeMachineSerial);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deviceSerial)) {
        this.deviceSerial = data().deepCopy(fields()[3].schema(), other.deviceSerial);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.coffeeDosage)) {
        this.coffeeDosage = data().deepCopy(fields()[4].schema(), other.coffeeDosage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.coffeeMilligrams)) {
        this.coffeeMilligrams = data().deepCopy(fields()[5].schema(), other.coffeeMilligrams);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.groupId)) {
        this.groupId = data().deepCopy(fields()[7].schema(), other.groupId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.customerName)) {
        this.customerName = data().deepCopy(fields()[8].schema(), other.customerName);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setCustomerId(java.lang.String value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'coffeeId' field.
      * @return The value.
      */
    public java.lang.String getCoffeeId() {
      return coffeeId;
    }

    /**
      * Sets the value of the 'coffeeId' field.
      * @param value The value of 'coffeeId'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setCoffeeId(java.lang.String value) {
      validate(fields()[1], value);
      this.coffeeId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'coffeeId' field has been set.
      * @return True if the 'coffeeId' field has been set, false otherwise.
      */
    public boolean hasCoffeeId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'coffeeId' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearCoffeeId() {
      coffeeId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'coffeeMachineSerial' field.
      * @return The value.
      */
    public java.lang.String getCoffeeMachineSerial() {
      return coffeeMachineSerial;
    }

    /**
      * Sets the value of the 'coffeeMachineSerial' field.
      * @param value The value of 'coffeeMachineSerial'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setCoffeeMachineSerial(java.lang.String value) {
      validate(fields()[2], value);
      this.coffeeMachineSerial = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'coffeeMachineSerial' field has been set.
      * @return True if the 'coffeeMachineSerial' field has been set, false otherwise.
      */
    public boolean hasCoffeeMachineSerial() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'coffeeMachineSerial' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearCoffeeMachineSerial() {
      coffeeMachineSerial = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceSerial' field.
      * @return The value.
      */
    public java.lang.String getDeviceSerial() {
      return deviceSerial;
    }

    /**
      * Sets the value of the 'deviceSerial' field.
      * @param value The value of 'deviceSerial'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setDeviceSerial(java.lang.String value) {
      validate(fields()[3], value);
      this.deviceSerial = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceSerial' field has been set.
      * @return True if the 'deviceSerial' field has been set, false otherwise.
      */
    public boolean hasDeviceSerial() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'deviceSerial' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearDeviceSerial() {
      deviceSerial = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'coffeeDosage' field.
      * @return The value.
      */
    public java.lang.Integer getCoffeeDosage() {
      return coffeeDosage;
    }

    /**
      * Sets the value of the 'coffeeDosage' field.
      * @param value The value of 'coffeeDosage'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setCoffeeDosage(int value) {
      validate(fields()[4], value);
      this.coffeeDosage = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'coffeeDosage' field has been set.
      * @return True if the 'coffeeDosage' field has been set, false otherwise.
      */
    public boolean hasCoffeeDosage() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'coffeeDosage' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearCoffeeDosage() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'coffeeMilligrams' field.
      * @return The value.
      */
    public java.lang.Integer getCoffeeMilligrams() {
      return coffeeMilligrams;
    }

    /**
      * Sets the value of the 'coffeeMilligrams' field.
      * @param value The value of 'coffeeMilligrams'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setCoffeeMilligrams(int value) {
      validate(fields()[5], value);
      this.coffeeMilligrams = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'coffeeMilligrams' field has been set.
      * @return True if the 'coffeeMilligrams' field has been set, false otherwise.
      */
    public boolean hasCoffeeMilligrams() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'coffeeMilligrams' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearCoffeeMilligrams() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[6], value);
      this.timestamp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupId' field.
      * @return The value.
      */
    public java.lang.Integer getGroupId() {
      return groupId;
    }

    /**
      * Sets the value of the 'groupId' field.
      * @param value The value of 'groupId'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setGroupId(int value) {
      validate(fields()[7], value);
      this.groupId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'groupId' field has been set.
      * @return True if the 'groupId' field has been set, false otherwise.
      */
    public boolean hasGroupId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'groupId' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearGroupId() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerName' field.
      * @return The value.
      */
    public java.lang.String getCustomerName() {
      return customerName;
    }

    /**
      * Sets the value of the 'customerName' field.
      * @param value The value of 'customerName'.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder setCustomerName(java.lang.String value) {
      validate(fields()[8], value);
      this.customerName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'customerName' field has been set.
      * @return True if the 'customerName' field has been set, false otherwise.
      */
    public boolean hasCustomerName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'customerName' field.
      * @return This builder.
      */
    public iot.CoffeeInformation.Builder clearCustomerName() {
      customerName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CoffeeInformation build() {
      try {
        CoffeeInformation record = new CoffeeInformation();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.String) defaultValue(fields()[0]);
        record.coffeeId = fieldSetFlags()[1] ? this.coffeeId : (java.lang.String) defaultValue(fields()[1]);
        record.coffeeMachineSerial = fieldSetFlags()[2] ? this.coffeeMachineSerial : (java.lang.String) defaultValue(fields()[2]);
        record.deviceSerial = fieldSetFlags()[3] ? this.deviceSerial : (java.lang.String) defaultValue(fields()[3]);
        record.coffeeDosage = fieldSetFlags()[4] ? this.coffeeDosage : (java.lang.Integer) defaultValue(fields()[4]);
        record.coffeeMilligrams = fieldSetFlags()[5] ? this.coffeeMilligrams : (java.lang.Integer) defaultValue(fields()[5]);
        record.timestamp = fieldSetFlags()[6] ? this.timestamp : (java.lang.Long) defaultValue(fields()[6]);
        record.groupId = fieldSetFlags()[7] ? this.groupId : (java.lang.Integer) defaultValue(fields()[7]);
        record.customerName = fieldSetFlags()[8] ? this.customerName : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CoffeeInformation>
    WRITER$ = (org.apache.avro.io.DatumWriter<CoffeeInformation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CoffeeInformation>
    READER$ = (org.apache.avro.io.DatumReader<CoffeeInformation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
